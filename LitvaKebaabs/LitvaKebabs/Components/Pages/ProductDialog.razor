@using LitvaKebabs.Services
@using System.ComponentModel.DataAnnotations
@using LitvaKebabs.Models
<!-- Attr: https://www.c-sharpcorner.com/article/blazor-web-assembly-3-2-addeditdelete-fully-functional-application-part-2/ -->

@inject LitvaKebabsContext DbContext

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleLabel">@if (AddOrModify == "add")
                        {
                            <span>Add</span>
                        } else if (AddOrModify == "modify")
                        {
                            <span>Modify</span>
                        }
                        menu item</h5>
                    <button type="button" class="close" @onclick="@Close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                @if(AddOrModify == "add") {
                <div class="modal-body">
                    <EditForm FormName="add-product" Model="@Product" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="lastName">Menu item name: </label>
                            <InputText id="menuItem" class="form-control" @bind-Value="@Product.ProductName" placeholder="Enter name of menu item"></InputText>
                            <ValidationMessage For="@(() => Product.ProductName)" />
                        </div>
                        <div class="form-group">
                            <label for="firstName">Menu item price: </label>
                            <InputNumber id="menuPrice" class="form-control" @bind-Value="Product.ProductPrice" placeholder="Enter menu item price"></InputNumber>
                            <ValidationMessage For="@(() => Product.ProductPrice)" />
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Save menu item</button>
                        <a class="btn btn-outline-primary mt-2" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
                } else if(AddOrModify == "modify") {
                    <div class="modal-body">
                    <EditForm FormName="modify-product" Model="@ProductToModify" OnValidSubmit="@HandleValidUpdate">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="lastName">Menu item name: </label>
                            <InputText id="menuItem" class="form-control" @bind-Value="@ProductToModify!.ProductName" placeholder="Enter name of menu item"></InputText>
                            <ValidationMessage For="@(() => Product.ProductName)" />
                        </div>
                        <div class="form-group">
                            <label for="firstName">Menu item price: </label>
                            <InputNumber id="menuPrice" class="form-control" @bind-Value="ProductToModify!.ProductPrice" placeholder="Enter menu item price"></InputNumber>
                            <ValidationMessage For="@(() => Product.ProductPrice)" />
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Save menu item</button>
                        <a class="btn btn-outline-primary mt-2" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
                }

            </div>
        </div>
    </div>
} 

@code {
    public Product Product { get; set; } = new Product();

    public bool ShowDialog { get; set; }

    [Parameter, Required]
    public string AddOrModify { get; set; }

    [Parameter]
    public Product? ProductToModify { get; set; }

    [Parameter]
    public EventCallback<Product> ProductState { get; set; }

    public void Show()
    {
        ResetDialog();
        ShowDialog = true;
        StateHasChanged();
    }
    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }
    private void ResetDialog()
    {
        Product = new Product { };
    }
    protected async Task HandleValidSubmit()
    {
        await ProductState.InvokeAsync(Product);
    }

    protected async Task HandleValidUpdate()
    {
        await ProductState.InvokeAsync(ProductToModify);
    }
}
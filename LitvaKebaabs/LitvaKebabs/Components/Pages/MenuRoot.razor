@page "/menu"
@using LitvaKebabs.Models
@using LitvaKebabs.Services
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject LitvaKebabsContext LitvaKebabsContext
@inject NavigationManager NavMan


<PageTitle>Order menu</PageTitle>

<h1>Order menu</h1>
<div class="container-fluid align-content-start">
    <div class="align-content-around">
        <PostcodeLookup/>
    </div>
    @foreach (var product in _products)
     {
         <button class="order-button" @onclick="@(e => AddToReceipt(product))">
             <span class="order-button-menu">@product.ProductName</span>
             <span class="order-button-price">@product.ProductPrice</span>
         </button>
     }
    <p>@ReceiptCount items in receipt</p>
    <ul>
        @foreach (var item in Cart)
        {
            <li>@item.ProductName @item.ProductPrice</li>
        }
    </ul>



    @foreach (var item in Cart)
    {
        cartTotal = cartTotal + item.ProductPrice;
    }
    <p>Delivery cost: TO BE IMPLEMENTED.</p>
    <p>Cart Total: £@cartTotal</p>

    <button class="btn btn-primary" @onclick="SubmitOrder">Submit</button>

    <!--<OrderButton/> -->
    <!--<Receipt/>-->
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        _products = await LitvaKebabsContext.Product.ToListAsync();
    }
    public int KebabQty { get; set; } = 0;

    private int ReceiptCount = 0;
    private decimal cartTotal = 0;  
    private List<Product> Cart;
    private List<Product> _products;


    private void AddToReceipt(Product item)
    {
        cartTotal = 0;

        Cart.Add(item);
        ReceiptCount++;
    }

    private async Task SubmitOrder()
    {
        if (Cart.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cannot proceed, order has no items. Please add items to the cart and try again.");
        }
        else
        {
            Random random = new();
            // I can't wait for the first order to be order 935,312
            int ranId = random.Next(1, 1000000);
            Order order = new()
            {
                // Please I hope this will not be empty
                OrderDate = DateTime.Now,
                OrderQuantity = KebabQty,
                OrderPrice = cartTotal
            };
            

            NavMan.NavigateTo(QueryHelpers.AddQueryString("/order-summary", "id", order.OrderId.ToString()));
        }

    }


}
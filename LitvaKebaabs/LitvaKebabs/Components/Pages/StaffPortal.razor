@using LitvaKebabs.Services
@using LitvaKebabs.Models
@using Microsoft.EntityFrameworkCore
@page "/staff-portal"
@rendermode InteractiveServer
@inject IDbContextFactory<LitvaKebabsContext> LitvaKebabsContext
@inject NavigationManager NavMan

<PageTitle>Staff portal</PageTitle>

<h1 class="text-center">Welcome to the staff portal</h1>
<div class="container-fluid">
    <h2 class="card-subtitle">Menu management</h2>
    <div class="btn-toolbar" role="toolbar">
       <button class="btn btn-primary" @onclick="AddMenuItem">Add new item</button>
    </div>
    <table class="table table-bordered">
        <thead>
        <tr>
            <th scope="col">ID</th>
            <th scope="col">Menu item</th>
            <th scope="col">Price</th>
        </tr>
        </thead>
        <tbody>            
        @if (_products is null)
        {
            <p>Loading....</p>
        }
        else
    {
        @foreach (var product in _products)
        {

            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.ProductPrice</td>
                <td>
                    <button class="btn btn-primary mx-1">Modify</button>
                    <button class="btn btn-danger mx-1">Remove</button>
                </td>
            </tr>
            }
        }
        </tbody>
    </table>
</div>

<ProductDialog AddOrModify="add" @ref="addDialog" ProductState=@DisplayNewProduct />
<ProductDialog AddOrModify="modify" @ref="modifyDialog" />

@code {

    ProductDialog addDialog;
    ProductDialog modifyDialog;

    private List<Product>? _products;

    private void AddMenuItem()
    {
        addDialog.Show();
    }

    private void OnAmendedItem()
    {
        /*addDialog.EditingMenuItem = menuItem;*/
        modifyDialog.Show();
    }

    private async Task DisplayNewProduct(Product value)
    {
        addDialog.Close();
        _products.Add(value);
        await using var context = await LitvaKebabsContext.CreateDbContextAsync();
        await context.Product.AddAsync(value);
        await context.SaveChangesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        
        await using var context = await LitvaKebabsContext.CreateDbContextAsync();
        await Task.Delay(100);
        _products = await context.Product.ToListAsync() ?? new List<Product>();
    }

    private async Task DeleteProduct(Product product)
    {
        await using var context = await LitvaKebabsContext.CreateDbContextAsync();
        context.Product.Remove(product);
        await context.SaveChangesAsync();
    }

}